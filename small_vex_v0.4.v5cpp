{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, true);\nmotor RightDriveSmart = motor(PORT2, ratio18_1, false);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor AletaIzquierda = motor(PORT3, ratio18_1, false);\n\nmotor AletaDerecha = motor(PORT4, ratio18_1, true);\n\ncontroller Controller1 = controller(primary);\nmotor Rodilla = motor(PORT5, ratio18_1, false);\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:                                               \n//    Author:\n//    Created:\n//    Configuration:        \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Begin project code\nbool boolSetVelo = false;\nbool boolAleDer = false;\n\n// bool DrivetrainLNeedsToBeStopped_Controller1= true;\n// bool DrivetrainRNeedsToBeStopped_Controller1= true;\n\nvoid aletaDerechaFunction(){\n  AletaDerecha.setStopping(hold);\n  if(boolAleDer){\n    AletaDerecha.spinToPosition(0, degrees);\n    boolAleDer = false;\n  }\n  else{\n   AletaDerecha.spinToPosition(90, degrees); \n   boolAleDer = true;\n  }\n}\n\nvoid setMaxVelocityFunction(){\n  if(boolSetVelo){\n    RightDriveSmart.setVelocity(100, percent);\n    LeftDriveSmart.setVelocity(100, percent);\n\n    Brain.Screen.print(\"100%\");\n    boolSetVelo = false;\n  }\n  else{\n    \n    RightDriveSmart.setVelocity(20, percent);\n    LeftDriveSmart.setVelocity(20, percent);\n    Brain.Screen.print(\"20%\");\n    boolSetVelo = true;\n\n  }\n}\n\nvoid ControllMovement(){\n  \n  int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n  int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n  \n  if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n    if (DrivetrainLNeedsToBeStopped_Controller1) {\n      LeftDriveSmart.stop();\n      DrivetrainLNeedsToBeStopped_Controller1 = false;\n    }\n  } else {\n    DrivetrainLNeedsToBeStopped_Controller1 = true;\n  }\n  if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n    if (DrivetrainRNeedsToBeStopped_Controller1) {\n      RightDriveSmart.stop();\n      DrivetrainRNeedsToBeStopped_Controller1 = false;\n    }\n  } else {\n    DrivetrainRNeedsToBeStopped_Controller1 = true;\n  }\n  \n  if (DrivetrainLNeedsToBeStopped_Controller1) {\n    LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n    LeftDriveSmart.spin(forward);\n  }\n  if (DrivetrainRNeedsToBeStopped_Controller1) {\n    RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n    RightDriveSmart.spin(forward);\n  }\n}\n\n\nvoid preAutonomous(void) {\n  // actions to do when the program starts\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"pre auton code\");\n  wait(1, seconds);\n}\n\nvoid autonomous(void) {\n  Brain.Screen.clearScreen();\n  Brain.Screen.print(\"autonomous code\");\n  // place automonous code here\n}\n\nvoid userControl(void) {\n  \n  Brain.Screen.clearScreen();\n  // place driver control in this while loop\n    \n  while (true) {\n    wait(20, msec);\n    Controller1.ButtonA.pressed(setMaxVelocityFunction);\n    Controller1.ButtonB.pressed(aletaDerechaFunction);\n    if((Controller1.Axis1.position() >= 0  && Controller1.Axis1.position() <= 5) ||  (Controller1.Axis3.position() >= 0  & Controller1.Axis3.position() <= 5)){\n      ControllMovement();\n    }\n  \n    if(Controller1.ButtonL2.pressing()){\n      \n      Rodilla.setVelocity(100, percent);\n      Rodilla.spin(reverse);\n    }\n    else if(Controller1.ButtonY.pressing()){\n      \n         Rodilla.setVelocity(100, percent);\n        Rodilla.spin(forward);\n    }\n    else{\n        Rodilla.stop();\n    }\n   \n  }\n}\n\n\n\nint main() {\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[1,2,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"rev","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3],"name":"AletaIzquierda","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"adelante","rev":"reversa","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"AletaDerecha","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"adelante","rev":"reversa","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[5],"name":"Rodilla","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"adelante","rev":"reversa","gear":"ratio18_1","id":"partner"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}